name: Static Analysis

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**.js' # Add JS files
      - '**.jsx' # Add JSX files
      - '.github/workflows/go-static-analysis.yml' # Trigger on workflow changes too

jobs:
  lint_and_fix_go: # Renamed for clarity, was 'lint'
    name: Go Static Analysis & Auto-fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }} # Token for checkout to push later

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Initialize Go module in ./code if not present, then tidy
        run: |
          if [ ! -f go.mod ]; then
            echo "go.mod not found, initializing module..."
            go mod init github.com/euclidstellar/testtt
          else
            echo "go.mod found, skipping initialization."
          fi
          echo "Running go mod tidy..."
          go mod tidy
        working-directory: ./code

      - name: Run lint and report issues (Go)
        uses: reviewdog/action-golangci-lint@v2
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_level: error
          golangci_lint_version: v1.53.3
          workdir: ./code
          # .golangci.yml is expected in the root or ./code, ensure it's accessible
          # If .golangci.yml is in root, golangci-lint will find it when run from ./code

      # REMOVED: - name: Run gofmt to fix formatting issues


      - name: Commit and push Go changes if any
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          # Add all changes, including go.mod, go.sum, and any .go files modified by goimports
          git add -A 
          if git diff --staged --quiet; then
            echo "No Go changes to commit"
          else
            git commit -m "style: Auto-fix Go code (imports, go.mod)"
            git push
          fi

  lint_js:
    name: JavaScript Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read access to checkout code
      pull-requests: write # Write access to post PR comments
    steps:
      - uses: actions/checkout@v3

      - name: Check for JS project files
        id: check_js_files
        run: |
          if [ -f "js-code/package.json" ]; then
            echo "js_package_exists=true" >> $GITHUB_OUTPUT
            echo "Found js-code/package.json"
            if [ -f "js-code/package-lock.json" ]; then
              echo "js_lock_exists=true" >> $GITHUB_OUTPUT
              echo "Found js-code/package-lock.json"
            else
              echo "js_lock_exists=false" >> $GITHUB_OUTPUT
              echo "js-code/package-lock.json NOT found."
            fi
          else
            echo "js_package_exists=false" >> $GITHUB_OUTPUT
            echo "js_lock_exists=false" >> $GITHUB_OUTPUT # Ensure js_lock_exists is also false
            echo "js-code/package.json not found."
          fi

      - name: Set up Node.js with caching (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: js-code/package-lock.json

      - name: Set up Node.js without caching (if no package-lock.json)
        if: steps.check_js_files.outputs.js_lock_exists == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install JS dependencies with npm ci (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        run: npm ci
        working-directory: ./js-code

      - name: Install JS dependencies with npm install (if package.json exists but no lock file)
        if: steps.check_js_files.outputs.js_package_exists == 'true' && steps.check_js_files.outputs.js_lock_exists == 'false'
        run: npm install # This will generate a package-lock.json
        working-directory: ./js-code
        # Note: The generated package-lock.json from this step will not be committed by the workflow.
        # For caching to work on subsequent runs, you should run 'npm install' locally in 'js-code/'
        # and commit the generated 'package-lock.json'.

      - name: Run ESLint and report issues (JS)
        uses: reviewdog/action-eslint@v1
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '**/*.js **/*.jsx --no-error-on-unmatched-pattern' # Added flag
          fail_level: error
          workdir: ./js-code