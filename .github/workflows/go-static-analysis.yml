name: Static Analysis

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**.js'
      - '**.jsx'
      - '.github/workflows/go-static-analysis.yml'

jobs:
  lint_and_fix_go:
    name: Go Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        working-directory:
          - code
          # Add more Go project directories here if needed
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.57.2
          working-directory: ${{ matrix.working-directory }}
          install-mode: "goinstall"

      # Optional: If you want reviewdog PR comments, add this step
      - name: Run golangci-lint and report via reviewdog
        run: |
          golangci-lint run --out-format=checkstyle ./... | reviewdog -f=checkstyle -name="golangci-lint" -reporter=github-pr-review -fail-on-error=true
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ matrix.working-directory }}

      - name: Upload golangci-lint summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golangci-lint-summary
          path: ${{ matrix.working-directory }}

      - name: Summarize lint results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addRaw("## Go Static Analysis Run in ${{ matrix.working-directory }}\n")

  lint_js:
    name: JavaScript Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Find all JS/TS projects
        id: find_projects
        run: |
          find . -name package.json -not -path "*/node_modules/*" > projects.txt
          cat projects.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run ESLint via reviewdog (PR review) for all projects
        run: |
          while read project; do
            dir=$(dirname "$project")
            if [ -f "$dir/package.json" ]; then
              echo "Running ESLint in $dir"
              cd "$dir"
              npm ci || npm install
              npx eslint '**/*.{js,jsx,ts,tsx}' --no-error-on-unmatched-pattern | npx reviewdog -f=eslint -name="eslint" -reporter=github-pr-review -fail-on-error=true
              cd -
            fi
          done < projects.txt
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}