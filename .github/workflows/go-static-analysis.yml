name: Static Analysis

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**.js'
      - '**.jsx'
      - '.github/workflows/go-static-analysis.yml'

jobs:
  lint_and_fix_go:
    name: Go Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        go-version: [ '1.20', '1.21', '1.22' ] # Configurable Go versions
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            **/go.sum
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}

      - name: Find all Go modules
        id: find-modules
        run: |
          find . -type f -name 'go.mod' | sed 's|/go.mod||' > modules.txt
          cat modules.txt

      - name: Lint all Go modules with golangci-lint
        run: |
          while read moddir; do
            echo "==> Linting $moddir"
            # Auto-detect .golangci.yml location: prefer $moddir, fallback to root
            if [ -f "$moddir/.golangci.yml" ]; then
              config="--config $moddir/.golangci.yml"
            elif [ -f ".golangci.yml" ]; then
              config="--config .golangci.yml"
            else
              config=""
            fi
            golangci-lint run $config --out-format=github-actions
          done < modules.txt
        shell: bash

      - name: Run golangci-lint via reviewdog (PR review)
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_level: error
          golangci_lint_version: v1.53.3
          workdir: .
          # reviewdog will pick up all .go files in the repo

      - name: Upload golangci-lint summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golangci-lint-summary
          path: |
            modules.txt

      - name: Summarize lint results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addRaw("## Go Modules Checked\n")
            const fs = require('fs');
            const modules = fs.readFileSync('modules.txt', 'utf8');
            core.summary.addRaw(modules);

  lint_js:
    name: JavaScript Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Check for JS project files
        id: check_js_files
        run: |
          if [ -f "js-code/package.json" ]; then
            echo "js_package_exists=true" >> $GITHUB_OUTPUT
            echo "Found js-code/package.json"
            if [ -f "js-code/package-lock.json" ]; then
              echo "js_lock_exists=true" >> $GITHUB_OUTPUT
              echo "Found js-code/package-lock.json"
            else
              echo "js_lock_exists=false" >> $GITHUB_OUTPUT
              echo "js-code/package-lock.json NOT found."
            fi
          else
            echo "js_package_exists=false" >> $GITHUB_OUTPUT
            echo "js_lock_exists=false" >> $GITHUB_OUTPUT
            echo "js-code/package.json not found."
          fi

      - name: Set up Node.js with caching (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: js-code/package-lock.json

      - name: Set up Node.js without caching (if no package-lock.json)
        if: steps.check_js_files.outputs.js_lock_exists == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install JS dependencies with npm ci (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        run: npm ci
        working-directory: ./js-code

      - name: Install JS dependencies with npm install (if package.json exists but no lock file)
        if: steps.check_js_files.outputs.js_package_exists == 'true' && steps.check_js_files.outputs.js_lock_exists == 'false'
        run: npm install
        working-directory: ./js-code

      - name: Run ESLint and report issues (JS)
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '**/*.js **/*.jsx --no-error-on-unmatched-pattern'
          fail_level: error
          workdir: ./js-code