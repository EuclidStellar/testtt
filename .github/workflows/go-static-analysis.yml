name: Go Static Analysis

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '.github/workflows/go-static-analysis.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  staticcheck:
    name: Staticcheck (Go)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Ensure go.mod exists and tidy
        run: |
          cd code
          if [ ! -f go.mod ]; then
            echo "go.mod not found, initializing module..."
            go mod init github.com/${GITHUB_REPOSITORY}
          else
            echo "go.mod found, skipping init."
          fi
          go mod tidy

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck and prepare comment
        run: |
          cd code
          staticcheck ./... > ../staticcheck-output.txt || true
          cd ..
          if [ ! -s staticcheck-output.txt ]; then
            echo "âœ… This code has no static issues." > staticcheck-output.txt
          fi

      - name: Post staticcheck results as PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: staticcheck-output.txt
          edit-mode: replace

  lint_js:
    name: JavaScript Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read access to checkout code
      pull-requests: write # Write access to post PR comments
    steps:
      - uses: actions/checkout@v3

      - name: Check for JS project files
        id: check_js_files
        run: |
          if [ -f "js-code/package.json" ]; then
            echo "js_package_exists=true" >> $GITHUB_OUTPUT
            echo "Found js-code/package.json"
            if [ -f "js-code/package-lock.json" ]; then
              echo "js_lock_exists=true" >> $GITHUB_OUTPUT
              echo "Found js-code/package-lock.json"
            else
              echo "js_lock_exists=false" >> $GITHUB_OUTPUT
              echo "js-code/package-lock.json NOT found."
            fi
          else
            echo "js_package_exists=false" >> $GITHUB_OUTPUT
            echo "js_lock_exists=false" >> $GITHUB_OUTPUT # Ensure js_lock_exists is also false
            echo "js-code/package.json not found."
          fi

      - name: Set up Node.js with caching (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: js-code/package-lock.json

      - name: Set up Node.js without caching (if no package-lock.json)
        if: steps.check_js_files.outputs.js_lock_exists == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install JS dependencies with npm ci (if package-lock.json exists)
        if: steps.check_js_files.outputs.js_lock_exists == 'true'
        run: npm ci
        working-directory: ./js-code

      - name: Install JS dependencies with npm install (if package.json exists but no lock file)
        if: steps.check_js_files.outputs.js_package_exists == 'true' && steps.check_js_files.outputs.js_lock_exists == 'false'
        run: npm install # This will generate a package-lock.json
        working-directory: ./js-code
        # Note: The generated package-lock.json from this step will not be committed by the workflow.
        # For caching to work on subsequent runs, you should run 'npm install' locally in 'js-code/'
        # and commit the generated 'package-lock.json'.

      - name: Run ESLint and report issues (JS)
        uses: reviewdog/action-eslint@v1
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '**/*.js **/*.jsx --no-error-on-unmatched-pattern' # Added flag
          fail_level: error
          workdir: ./js-code