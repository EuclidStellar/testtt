name: Ollama Model Setup and PR Review

# This workflow will be triggered on:
# - pull_request events: to enable the code review step.
# - workflow_dispatch: to allow manual triggering for initial setup and testing.
on:
  pull_request:
    # Adjust branches as needed, e.g., 'main', 'master', or specific release branches
    branches:
      - llm
  workflow_dispatch:

# Added permissions for the GITHUB_TOKEN to allow writing comments on pull requests.
permissions:
  contents: read # Required for checkout
  pull-requests: write # Required to create comments on PRs
  issues: write # Also useful for general issue comments

jobs:
  # Combined job for setup, download, and PR review
  ollama_workflow:
    name: Ollama Setup, Model Download, and PR Review
    # This job runs for both pull_request and workflow_dispatch events
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for `git diff` later

      - name: Install Ollama (amd64 bundle)
        id: install_ollama
        run: |
          echo "--- Installing Ollama ---"
          # Download and execute the Ollama installation script for amd64 architecture.
          curl -fsSL https://ollama.com/install.sh | sh
          echo "Ollama installation complete."

      - name: Start Ollama Service, Pull Model, and Prepare for Review
        id: setup_ollama_and_pull_model
        # Run Ollama in the background for the duration of the job
        run: |
          echo "--- Starting Ollama service in background ---"
          nohup ollama serve &> ollama_serve.log &
          OLLAMA_PID=$!
          echo "Ollama server PID: $OLLAMA_PID"

          echo "Waiting for Ollama service to be ready..."
          until curl http://localhost:11434/api/tags > /dev/null 2>&1; do
            sleep 1
          done
          echo "Ollama service is ready at http://localhost:11434."

          echo "--- Pulling qwen3:14b model ---"
          START_TIME=$(date +%s)
          ollama pull qwen3:14b
          END_TIME=$(date +%s)
          DOWNLOAD_DURATION=$((END_TIME - START_TIME))
          echo "::notice file=ollama_pull_duration.log::Model download time: ${DOWNLOAD_DURATION} seconds"
          echo "download_duration=${DOWNLOAD_DURATION}" >> $GITHUB_OUTPUT

          # Store PID for later cleanup in the same job
          echo "ollama_pid=$OLLAMA_PID" >> $GITHUB_OUTPUT
        env:
          OLLAMA_HOST: 0.0.0.0:11434

      - name: Display Measured Download Duration
        run: |
          echo "-------------------------------------------------------------------"
          echo "Summary of Ollama Model Operation Times:"
          echo "Model Download Duration: ${{ steps.setup_ollama_and_pull_model.outputs.download_duration }} seconds"
          echo "Note: Initial model load time will occur during the first inference (PR review)."
          echo "-------------------------------------------------------------------"

      - name: Get PR diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > pr.diff

      - name: Review PR with Ollama and Custom Prompt
        id: review_with_ollama
        # Only run this step if the workflow was triggered by a pull_request event
        if: github.event_name == 'pull_request'
        run: |
          DIFF_FILE_PATH="pr_diff.txt"
          if [ -f "$DIFF_FILE_PATH" ] && [ -s "$DIFF_FILE_PATH" ]; then
            PR_DIFF=$(cat "$DIFF_FILE_PATH")

            CUSTOM_PROMPT="You are an expert code reviewer. Your task is to analyze the provided git diff, identify potential issues, suggest improvements, and summarize the key changes. Pay close attention to:
            - Readability and code style adherence.
            - Potential bugs or edge cases.
            - Security vulnerabilities.
            - Performance implications.
            - Adherence to best practices.
            - Missing tests or documentation.

            Here is the git diff:
            \`\`\`diff
            $PR_DIFF
            \`\`\`

            Provide your review in a concise and actionable manner, using markdown formatting including code blocks where necessary. Start with a brief summary, then list specific findings and suggestions.  Output only the review comments for the code changes. Do not include your reasoning or thinking process.
            End with a summary of the most critical issues found."

            echo "--- Sending diff to Ollama for review ---"
            REVIEW_RESULT=$(echo "$CUSTOM_PROMPT" | ollama run qwen3:14b)

            echo "--- Ollama PR Review Result ---"
            echo "::group::Ollama Review Output"
            echo "$REVIEW_RESULT"
            echo "::endgroup::"

            echo "review_result<<EOF" >> $GITHUB_OUTPUT
            echo "$REVIEW_RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

          else
            echo "No diff content found or diff file is empty. Skipping PR review."
          fi
        env:
          OLLAMA_HOST: 0.0.0.0:11434 # Ensure Ollama host is set for the run command

      - name: Create PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            const reviewOutput = process.env.REVIEW_RESULT; // Access the review result from environment variable
            if (reviewOutput && reviewOutput.trim() !== "") {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ¤– Ollama Code Review (qwen3:14b)\n\n${reviewOutput}`
              });
            } else {
              console.log('No review content generated. Skipping PR comment.');
            }
        env:
          # Pass the review_result as an environment variable to the github-script step
          REVIEW_RESULT: "${{ steps.review_with_ollama.outputs.review_result }}"
        if: always() && github.event_name == 'pull_request' && steps.review_with_ollama.outputs.review_result != ''

      - name: Stop Ollama Service (Cleanup)
        # Ensure Ollama process is killed even if previous steps fail.
        if: always()
        run: |
          echo "--- Stopping Ollama service ---"
          # Retrieve the PID stored earlier in setup_ollama_and_pull_model step outputs
          OLLAMA_PID="${{ steps.setup_ollama_and_pull_model.outputs.ollama_pid }}"
          if [ -n "$OLLAMA_PID" ] && ps -p "$OLLAMA_PID" > /dev/null; then
            kill "$OLLAMA_PID"
            echo "Ollama service with PID $OLLAMA_PID stopped."
          else
            echo "Ollama service not running or already stopped."
          fi
